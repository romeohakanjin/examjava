package webservice;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.1.12
 * 2018-07-04T14:36:31.195+02:00
 * Generated source version: 3.1.12
 * 
 */
@WebService(targetNamespace = "http://webservice/", name = "WebServiceSessionBean")
@XmlSeeAlso({ObjectFactory.class})
public interface WebServiceSessionBean {

    @WebMethod(action = "accuseReception")
    @RequestWrapper(localName = "getAccuseReception", targetNamespace = "http://webservice/", className = "webservice.GetAccuseReception")
    @ResponseWrapper(localName = "getAccuseReceptionResponse", targetNamespace = "http://webservice/", className = "webservice.GetAccuseReceptionResponse")
    @WebResult(name = "return", targetNamespace = "")
    public webservice.AccuseReception getAccuseReception(
        @WebParam(name = "idAccuseReception", targetNamespace = "")
        int idAccuseReception
    );

    @WebMethod(action = "findAllCommande")
    @RequestWrapper(localName = "findAllCommande", targetNamespace = "http://webservice/", className = "webservice.FindAllCommande")
    @ResponseWrapper(localName = "findAllCommandeResponse", targetNamespace = "http://webservice/", className = "webservice.FindAllCommandeResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.util.List<webservice.Commande> findAllCommande();

    @WebMethod(action = "getFournisseurs")
    @RequestWrapper(localName = "getFournisseurs", targetNamespace = "http://webservice/", className = "webservice.GetFournisseurs")
    @ResponseWrapper(localName = "getFournisseursResponse", targetNamespace = "http://webservice/", className = "webservice.GetFournisseursResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.util.List<webservice.Fournisseur> getFournisseurs();

    @WebMethod(action = "getFactures")
    @RequestWrapper(localName = "getFactures", targetNamespace = "http://webservice/", className = "webservice.GetFactures")
    @ResponseWrapper(localName = "getFacturesResponse", targetNamespace = "http://webservice/", className = "webservice.GetFacturesResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.util.List<webservice.Facture> getFactures();

    @WebMethod(action = "ajoutFacture")
    @RequestWrapper(localName = "ajoutFacture", targetNamespace = "http://webservice/", className = "webservice.AjoutFacture")
    @ResponseWrapper(localName = "ajoutFactureResponse", targetNamespace = "http://webservice/", className = "webservice.AjoutFactureResponse")
    @WebResult(name = "return", targetNamespace = "")
    public boolean ajoutFacture(
        @WebParam(name = "idCommande", targetNamespace = "")
        int idCommande
    );

    @WebMethod(action = "findAllPaiement")
    @RequestWrapper(localName = "findAllPaiement", targetNamespace = "http://webservice/", className = "webservice.FindAllPaiement")
    @ResponseWrapper(localName = "findAllPaiementResponse", targetNamespace = "http://webservice/", className = "webservice.FindAllPaiementResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.util.List<webservice.Paiement> findAllPaiement();

    @WebMethod(action = "getAccusesReceptions")
    @RequestWrapper(localName = "getAccusesReceptions", targetNamespace = "http://webservice/", className = "webservice.GetAccusesReceptions")
    @ResponseWrapper(localName = "getAccusesReceptionsResponse", targetNamespace = "http://webservice/", className = "webservice.GetAccusesReceptionsResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.util.List<webservice.AccuseReception> getAccusesReceptions();

    @WebMethod(action = "findCommandeById")
    @RequestWrapper(localName = "findCommandeById", targetNamespace = "http://webservice/", className = "webservice.FindCommandeById")
    @ResponseWrapper(localName = "findCommandeByIdResponse", targetNamespace = "http://webservice/", className = "webservice.FindCommandeByIdResponse")
    @WebResult(name = "return", targetNamespace = "")
    public webservice.Commande findCommandeById(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0
    );

    @WebMethod(action = "facture")
    @RequestWrapper(localName = "getFacture", targetNamespace = "http://webservice/", className = "webservice.GetFacture")
    @ResponseWrapper(localName = "getFactureResponse", targetNamespace = "http://webservice/", className = "webservice.GetFactureResponse")
    @WebResult(name = "return", targetNamespace = "")
    public webservice.Facture getFacture(
        @WebParam(name = "idFacture", targetNamespace = "")
        int idFacture
    );

    @WebMethod(action = "ajoutCommande")
    @RequestWrapper(localName = "ajoutCommande", targetNamespace = "http://webservice/", className = "webservice.AjoutCommande")
    @ResponseWrapper(localName = "ajoutCommandeResponse", targetNamespace = "http://webservice/", className = "webservice.AjoutCommandeResponse")
    public void ajoutCommande(
        @WebParam(name = "commande", targetNamespace = "")
        webservice.Commande commande
    );

    @WebMethod(action = "findFactureByIdCommande")
    @RequestWrapper(localName = "findFactureByIdCommande", targetNamespace = "http://webservice/", className = "webservice.FindFactureByIdCommande")
    @ResponseWrapper(localName = "findFactureByIdCommandeResponse", targetNamespace = "http://webservice/", className = "webservice.FindFactureByIdCommandeResponse")
    @WebResult(name = "return", targetNamespace = "")
    public webservice.Facture findFactureByIdCommande(
        @WebParam(name = "idCommande", targetNamespace = "")
        int idCommande
    );

    @WebMethod(action = "existeCommandeById")
    @RequestWrapper(localName = "existeCommandeById", targetNamespace = "http://webservice/", className = "webservice.ExisteCommandeById")
    @ResponseWrapper(localName = "existeCommandeByIdResponse", targetNamespace = "http://webservice/", className = "webservice.ExisteCommandeByIdResponse")
    @WebResult(name = "return", targetNamespace = "")
    public boolean existeCommandeById(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0
    );

    @WebMethod(action = "findLivraisonByCommandId")
    @RequestWrapper(localName = "findLivraisonByCommandId", targetNamespace = "http://webservice/", className = "webservice.FindLivraisonByCommandId")
    @ResponseWrapper(localName = "findLivraisonByCommandIdResponse", targetNamespace = "http://webservice/", className = "webservice.FindLivraisonByCommandIdResponse")
    @WebResult(name = "return", targetNamespace = "")
    public webservice.Livraison findLivraisonByCommandId(
        @WebParam(name = "idCommande", targetNamespace = "")
        int idCommande
    );

    @WebMethod(action = "ajoutPaiement")
    @RequestWrapper(localName = "ajoutPaiement", targetNamespace = "http://webservice/", className = "webservice.AjoutPaiement")
    @ResponseWrapper(localName = "ajoutPaiementResponse", targetNamespace = "http://webservice/", className = "webservice.AjoutPaiementResponse")
    @WebResult(name = "return", targetNamespace = "")
    public boolean ajoutPaiement(
        @WebParam(name = "idFacture", targetNamespace = "")
        int idFacture
    );

    @WebMethod(action = "ajoutAccuseReception")
    @RequestWrapper(localName = "ajoutAccuseReception", targetNamespace = "http://webservice/", className = "webservice.AjoutAccuseReception")
    @ResponseWrapper(localName = "ajoutAccuseReceptionResponse", targetNamespace = "http://webservice/", className = "webservice.AjoutAccuseReceptionResponse")
    @WebResult(name = "return", targetNamespace = "")
    public boolean ajoutAccuseReception(
        @WebParam(name = "accuseReception", targetNamespace = "")
        webservice.AccuseReception accuseReception
    );

    @WebMethod(action = "existeLivraisonByCommandId")
    @RequestWrapper(localName = "existeLivraisonByCommandId", targetNamespace = "http://webservice/", className = "webservice.ExisteLivraisonByCommandId")
    @ResponseWrapper(localName = "existeLivraisonByCommandIdResponse", targetNamespace = "http://webservice/", className = "webservice.ExisteLivraisonByCommandIdResponse")
    @WebResult(name = "return", targetNamespace = "")
    public boolean existeLivraisonByCommandId(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0
    );

    @WebMethod(action = "findAccuseReceptionByIdCommande")
    @RequestWrapper(localName = "findAccuseReceptionByIdCommande", targetNamespace = "http://webservice/", className = "webservice.FindAccuseReceptionByIdCommande")
    @ResponseWrapper(localName = "findAccuseReceptionByIdCommandeResponse", targetNamespace = "http://webservice/", className = "webservice.FindAccuseReceptionByIdCommandeResponse")
    @WebResult(name = "return", targetNamespace = "")
    public webservice.AccuseReception findAccuseReceptionByIdCommande(
        @WebParam(name = "idCommande", targetNamespace = "")
        int idCommande
    );

    @WebMethod(action = "getLivraisons")
    @RequestWrapper(localName = "getLivraisons", targetNamespace = "http://webservice/", className = "webservice.GetLivraisons")
    @ResponseWrapper(localName = "getLivraisonsResponse", targetNamespace = "http://webservice/", className = "webservice.GetLivraisonsResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.util.List<webservice.Livraison> getLivraisons();

    @WebMethod(action = "findFournisseurById")
    @RequestWrapper(localName = "findFournisseurById", targetNamespace = "http://webservice/", className = "webservice.FindFournisseurById")
    @ResponseWrapper(localName = "findFournisseurByIdResponse", targetNamespace = "http://webservice/", className = "webservice.FindFournisseurByIdResponse")
    @WebResult(name = "return", targetNamespace = "")
    public webservice.Fournisseur findFournisseurById(
        @WebParam(name = "id", targetNamespace = "")
        int id
    );

    @WebMethod(action = "findUtilisateurByLogin")
    @RequestWrapper(localName = "findUtilisateurByLogin", targetNamespace = "http://webservice/", className = "webservice.FindUtilisateurByLogin")
    @ResponseWrapper(localName = "findUtilisateurByLoginResponse", targetNamespace = "http://webservice/", className = "webservice.FindUtilisateurByLoginResponse")
    @WebResult(name = "return", targetNamespace = "")
    public webservice.Utilisateur findUtilisateurByLogin(
        @WebParam(name = "login", targetNamespace = "")
        java.lang.String login
    );

    @WebMethod(action = "findAllcommandeForResponsableStock")
    @RequestWrapper(localName = "findAllcommandeForResponsableStock", targetNamespace = "http://webservice/", className = "webservice.FindAllcommandeForResponsableStock")
    @ResponseWrapper(localName = "findAllcommandeForResponsableStockResponse", targetNamespace = "http://webservice/", className = "webservice.FindAllcommandeForResponsableStockResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.util.List<webservice.Commande> findAllcommandeForResponsableStock();

    @WebMethod(action = "connexion")
    @RequestWrapper(localName = "connexion", targetNamespace = "http://webservice/", className = "webservice.Connexion")
    @ResponseWrapper(localName = "connexionResponse", targetNamespace = "http://webservice/", className = "webservice.ConnexionResponse")
    @WebResult(name = "return", targetNamespace = "")
    public boolean connexion(
        @WebParam(name = "login", targetNamespace = "")
        java.lang.String login,
        @WebParam(name = "mdp", targetNamespace = "")
        java.lang.String mdp
    );

    @WebMethod(action = "existeAccuseReceptionByIdCommande")
    @RequestWrapper(localName = "existeAccuseReceptionByIdCommande", targetNamespace = "http://webservice/", className = "webservice.ExisteAccuseReceptionByIdCommande")
    @ResponseWrapper(localName = "existeAccuseReceptionByIdCommandeResponse", targetNamespace = "http://webservice/", className = "webservice.ExisteAccuseReceptionByIdCommandeResponse")
    @WebResult(name = "return", targetNamespace = "")
    public boolean existeAccuseReceptionByIdCommande(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0
    );

    @WebMethod(action = "findAllcommandeForComptable")
    @RequestWrapper(localName = "findAllcommandeForComptable", targetNamespace = "http://webservice/", className = "webservice.FindAllcommandeForComptable")
    @ResponseWrapper(localName = "findAllcommandeForComptableResponse", targetNamespace = "http://webservice/", className = "webservice.FindAllcommandeForComptableResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.util.List<webservice.Commande> findAllcommandeForComptable();

    @WebMethod(action = "livraison")
    @RequestWrapper(localName = "getLivraison", targetNamespace = "http://webservice/", className = "webservice.GetLivraison")
    @ResponseWrapper(localName = "getLivraisonResponse", targetNamespace = "http://webservice/", className = "webservice.GetLivraisonResponse")
    @WebResult(name = "return", targetNamespace = "")
    public webservice.Livraison getLivraison(
        @WebParam(name = "idLivraison", targetNamespace = "")
        int idLivraison
    );
}
